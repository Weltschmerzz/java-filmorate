/* ===== Справочники ===== */

-- Рейтинги MPA
CREATE TABLE IF NOT EXISTS mpa (
                                   id   INT         PRIMARY KEY,
                                   name VARCHAR(32) NOT NULL UNIQUE
);

-- Жанры
CREATE TABLE IF NOT EXISTS genres (
                                      id   INT         PRIMARY KEY,
                                      name VARCHAR(64) NOT NULL UNIQUE
);

-- Статусы дружбы
CREATE TABLE IF NOT EXISTS friend_status (
                                             id   INT         PRIMARY KEY,
                                             name VARCHAR(64) NOT NULL UNIQUE
);

/* ===== Основные таблицы ===== */

-- Пользователи
CREATE TABLE IF NOT EXISTS users (
                                     id         BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                                     email      VARCHAR(255) NOT NULL UNIQUE,
                                     login      VARCHAR(100) NOT NULL UNIQUE,
                                     name       VARCHAR(255),
                                     birthday   DATE,
                                     created_at TIMESTAMP     DEFAULT CURRENT_TIMESTAMP,
                                     updated_at TIMESTAMP     DEFAULT CURRENT_TIMESTAMP
);

-- Фильмы
CREATE TABLE IF NOT EXISTS films (
                                     id            BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                                     name          VARCHAR(255)  NOT NULL,
                                     description   VARCHAR(1500),
                                     release_date  DATE          NOT NULL,
                                     duration      INT           NOT NULL CHECK (duration > 0),
                                     mpa_id        INT           NOT NULL,
                                     created_at    TIMESTAMP     DEFAULT CURRENT_TIMESTAMP,
                                     updated_at    TIMESTAMP     DEFAULT CURRENT_TIMESTAMP,
                                     CONSTRAINT fk_films_mpa FOREIGN KEY (mpa_id) REFERENCES mpa(id)
);

/* ===== Промежуточные таблицы ===== */

-- Связь фильм ↔ жанры
CREATE TABLE IF NOT EXISTS film_genres (
                                           film_id  BIGINT NOT NULL,
                                           genre_id INT    NOT NULL,
                                           PRIMARY KEY (film_id, genre_id),
                                           CONSTRAINT fk_fg_film  FOREIGN KEY (film_id)  REFERENCES films(id)  ON DELETE CASCADE,
                                           CONSTRAINT fk_fg_genre FOREIGN KEY (genre_id) REFERENCES genres(id)
);

-- Лайки фильмов
CREATE TABLE IF NOT EXISTS film_likes (
                                          film_id    BIGINT    NOT NULL,
                                          user_id    BIGINT    NOT NULL,
                                          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                                          PRIMARY KEY (film_id, user_id),
                                          CONSTRAINT fk_fl_film FOREIGN KEY (film_id) REFERENCES films(id) ON DELETE CASCADE,
                                          CONSTRAINT fk_fl_user FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);

-- Дружбы между пользователями (однонаправленная запись)
CREATE TABLE IF NOT EXISTS friendships (
                                           user_id    BIGINT    NOT NULL,
                                           friend_id  BIGINT    NOT NULL,
                                           status_id  INT       NOT NULL DEFAULT 1, -- 1 = REQUESTED
                                           created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                                           PRIMARY KEY (user_id, friend_id),
                                           CONSTRAINT fk_fr_user   FOREIGN KEY (user_id)   REFERENCES users(id)  ON DELETE CASCADE,
                                           CONSTRAINT fk_fr_friend FOREIGN KEY (friend_id) REFERENCES users(id)  ON DELETE CASCADE,
                                           CONSTRAINT fk_fr_status FOREIGN KEY (status_id) REFERENCES friend_status(id),
                                           CONSTRAINT ck_self_friend CHECK (user_id <> friend_id)
);

