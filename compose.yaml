# описания сервисов (контейнеров), которые должны быть развёрнуты
services:
  # описание контейнера db
  db: # имя сервиса
    # образ, из которого должен быть запущен контейнер
    image: postgres:16.1
    # имя, которое нужно присвоить контейнеру
    container_name: db_filmorate
    # публикуемые порты
    ports:
      - "5432:5432"
    # настройки монтирования volume
    volumes:
      - ./volumes/postgres:/var/lib/postgresql/data/
    # переменные окружения
    environment:
      - POSTGRES_DB=filmsdb
      - POSTGRES_USER=dbuser
      - POSTGRES_PASSWORD=12345
    # описание способа проверки, что контейнер в рабочем состоянии
    healthcheck:
      # указываем, какую команду выполнить внутри контейнера для проверки его статуса
      # в этом примере вызывается утилита pg_isready, входящая в состав PostgreSQL
      test: pg_isready -q -d $$POSTGRES_DB -U $$POSTGRES_USER
      # через какое время после запуска начинать проверку
      timeout: 5s
      # интервал повторов проверки
      interval: 5s
      # количество попыток
      retries: 10
  db-init:
    image: postgres:16.1
    container_name: db-init
    depends_on:
      db:
        condition: service_healthy
    entrypoint:
      - bash
      - -c
      - |
        set -e
        psql postgresql://dbuser:12345@db:5432/filmsdb -v ON_ERROR_STOP=1 <<-EOSQL
          -- 1) справочники
          CREATE TABLE IF NOT EXISTS mpa (
            id   INT PRIMARY KEY,
            name VARCHAR(10) NOT NULL UNIQUE
          );
        
          CREATE TABLE IF NOT EXISTS genres (
            id   INT PRIMARY KEY,
            name VARCHAR(64) NOT NULL UNIQUE
          );
        
          -- NEW: справочник статусов дружбы вместо ENUM
          CREATE TABLE IF NOT EXISTS friend_status (
            id   INT PRIMARY KEY,
            name VARCHAR(32) NOT NULL UNIQUE
          );
        
          -- сиды (идемпотентно)
          INSERT INTO friend_status (id, name) VALUES
            (1, 'CONFIRMED'),
            (2, 'PENDING')
          ON CONFLICT (id) DO NOTHING;
        
          -- 2) основные таблицы
          CREATE TABLE IF NOT EXISTS users (
            id         BIGSERIAL PRIMARY KEY,
            email      VARCHAR(255) NOT NULL UNIQUE,
            login      VARCHAR(100) NOT NULL UNIQUE,
            name       VARCHAR(255),
            birthday   DATE,
            created_at TIMESTAMP NOT NULL DEFAULT now(),
            updated_at TIMESTAMP NOT NULL DEFAULT now()
          );
        
          CREATE TABLE IF NOT EXISTS films (
            id           BIGSERIAL PRIMARY KEY,
            name         VARCHAR(255) NOT NULL,
            description  VARCHAR(1500),
            release_date DATE NOT NULL,
            duration     INT  NOT NULL,
            mpa_id       INT  NOT NULL,
            created_at   TIMESTAMP NOT NULL DEFAULT now(),
            updated_at   TIMESTAMP NOT NULL DEFAULT now(),
            CONSTRAINT films_duration_positive CHECK (duration > 0),
            CONSTRAINT fk_films_mpa
              FOREIGN KEY (mpa_id) REFERENCES mpa(id)
          );
        
          -- 3) промежуточные таблицы
          CREATE TABLE IF NOT EXISTS film_genres (
            film_id  BIGINT NOT NULL,
            genre_id INT    NOT NULL,
            PRIMARY KEY (film_id, genre_id),
            CONSTRAINT fk_film_genres_film
              FOREIGN KEY (film_id) REFERENCES films(id) ON DELETE CASCADE,
            CONSTRAINT fk_film_genres_genre
              FOREIGN KEY (genre_id) REFERENCES genres(id)
          );
        
          CREATE TABLE IF NOT EXISTS film_likes (
            film_id    BIGINT    NOT NULL,
            user_id    BIGINT    NOT NULL,
            created_at TIMESTAMP NOT NULL DEFAULT now(),
            PRIMARY KEY (film_id, user_id),
            CONSTRAINT fk_film_likes_film
              FOREIGN KEY (film_id) REFERENCES films(id) ON DELETE CASCADE,
            CONSTRAINT fk_film_likes_user
              FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
          );
        
          CREATE TABLE IF NOT EXISTS friendships (
            user_id    BIGINT NOT NULL,
            friend_id  BIGINT NOT NULL,
            status_id  INT    NOT NULL DEFAULT 1, -- 1 = CONFIRMED
            created_at TIMESTAMP NOT NULL DEFAULT now(),
            PRIMARY KEY (user_id, friend_id),
            CONSTRAINT fk_friendships_user
              FOREIGN KEY (user_id)   REFERENCES users(id) ON DELETE CASCADE,
            CONSTRAINT fk_friendships_friend
              FOREIGN KEY (friend_id) REFERENCES users(id) ON DELETE CASCADE,
            CONSTRAINT fk_friendships_status
              FOREIGN KEY (status_id) REFERENCES friend_status(id),
            CONSTRAINT friendships_not_self CHECK (user_id <> friend_id)
          );
        EOSQL
  app:
    image: filmorate:latest
    ports:
      - "8080:8080"
    environment:
      # Настройки подключения к Postgres
      SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/filmsdb
      SPRING_DATASOURCE_USERNAME: dbuser
      SPRING_DATASOURCE_PASSWORD: 12345
      # При необходимости: активный профиль
      # SPRING_PROFILES_ACTIVE: prod
    depends_on:
      db:
        condition: service_healthy
      # db-init:
      #   condition: service_completed_successfully
    restart: unless-stopped